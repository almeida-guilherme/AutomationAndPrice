import streamlit as st
from datetime import datetime
import pandas as pd
import databaseCotacao as db
from getCotacao import getCurrentCotacao
from sendEmail import send_notification_email, send_weekly_summary_email
from googleSheetsFunctions import write_to_google_sheets

def calcular_variacao_percentual(valor_atual, valor_anterior):
    """Calcula a varia√ß√£o percentual entre dois valores."""
    if valor_anterior is None or valor_anterior == 0:
        return 0
    return ((valor_atual - valor_anterior) / valor_anterior) * 100

# --- Interface do Streamlit ---

st.title("üí∞ Painel de Cota√ß√£o de Moedas")

st.markdown("""
    Este painel exibe as cota√ß√µes atualizadas de moedas e monitora a varia√ß√£o do d√≥lar.
""")

# Configura o banco de dados antes de qualquer outra opera√ß√£o
db.setup_database()

# Busca os dados da API
api_data = getCurrentCotacao()

if api_data:
    # Obt√©m as cota√ß√µes atuais do d√≥lar e euro
    usd_valor_atual = float(api_data['USDBRL']['bid'])
    eur_valor_atual = float(api_data['EURBRL']['bid'])


    # Obt√©m a cota√ß√£o do d√≥lar do banco de dados (que √© a do dia anterior)
    usd_anterior = db.get_cotacao('USD-BRL')

    # Salva a nova cota√ß√£o do d√≥lar para a pr√≥xima verifica√ß√£o
    db.save_cotacao('USD-BRL',usd_valor_atual)

    if usd_anterior:
        variacao_usd = calcular_variacao_percentual(usd_valor_atual, usd_anterior[0])
        st.subheader("An√°lise de Varia√ß√£o do D√≥lar")
        st.metric(
            label="Varia√ß√£o do D√≥lar (USD/BRL) em rela√ß√£o ao √∫ltimo valor salvo",
            value=f"{variacao_usd:.2f}%",
            delta=f"{variacao_usd:.2f}%" # Exibe a varia√ß√£o como delta visual
        )

        # Placeholder para o e-mail de notifica√ß√£o de varia√ß√£o
        if abs(variacao_usd) > 2:
            st.warning("‚ö†Ô∏è **ALERTA!** A varia√ß√£o do d√≥lar √© maior que 2%. A fun√ß√£o de envio de e-mail ser√° ativada.")
            if send_notification_email(usd_valor_atual, variacao_usd):
                st.success("‚úÖ E-mail de notifica√ß√£o enviado com sucesso!")
            else:
                st.error("‚ùå Erro ao enviar o e-mail de notifica√ß√£o.")

    # Salva a nova cota√ß√£o do d√≥lar para a pr√≥xima verifica√ß√£o
    db.save_cotacao('USD-BRL', usd_valor_atual)

    # --- Exibi√ß√£o das Cota√ß√µes no Painel ---
    st.subheader("Cota√ß√µes Atuais")

    # Organiza os dados em um DataFrame do pandas para exibi√ß√£o em tabela
    data = {
        'Moeda': ['USD/BRL', 'EUR/BRL'],
        'Valor (R$)': [f"{usd_valor_atual:.2f}", f"{eur_valor_atual:.2f}"]
    }
    df_cotacoes = pd.DataFrame(data)
    data_to_sheets = {
        "cotacoes": {
            "USD-BRL": usd_valor_atual,
            "EUR-BRL": eur_valor_atual
        },
        "variacao_usd_percentual": variacao_usd,
        "data_atualizacao": datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    }

    write_to_google_sheets(data_to_sheets)
    # Adiciona a data e hora da √∫ltima atualiza√ß√£o
    df_cotacoes['√öltima Atualiza√ß√£o'] = datetime.now().strftime('%d/%m/%Y %H:%M:%S')

    # Exibe a tabela de forma elegante
    st.table(df_cotacoes.set_index('Moeda'))

    # Exemplo de como voc√™ chamaria a fun√ß√£o de e-mail semanal (n√£o precisa rodar sempre)
    if st.button("Enviar E-mail da cota√ß√£o"):
        st.info("Enviando e-mail da cota√ß√£o...")
        cotacoes_para_resumo = {
            'USD-BRL': usd_valor_atual,
            'EUR-BRL': eur_valor_atual
        }
        if send_weekly_summary_email(cotacoes_para_resumo):
            st.success("‚úÖ E-mail da cota√ß√£o enviado com sucesso!")
        else:
            st.error("‚ùå Erro ao enviar o e-mail da cota√ß√£o.")

else:
    st.error("N√£o foi poss√≠vel carregar os dados. Verifique sua conex√£o ou a API.")